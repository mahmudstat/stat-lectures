
---
title: "Elementary Statistics"
subtitle: "Statistics and Probability"
author: Abdullah Al Mahmud
format: revealjs
---

# VII

# IX-X Statistics

## Chapter Overview

<div class="container">
<div class="col">
> - Data presentation
> - Frequency and cumulative frequency
> - Frequency distribution
> - Variable types
> - Frequency polygon
> - Ogive
</div>
<div class="col">
> - Central Tendency
> - Arithmetic Mean (AM)
> - Short-cut method
> - Weighetd Mean
> - Median
> - Mode
</div>
</div>


## Why Organizing is Required

The ages of 20 participants in a fitness program were recorded and found to be as follows:

25, 30, 28, 35, 40, 38, 26, 32, 36, 31, 

27, 33, 29, 41, 42, 37, 34, 39, 43, 45

What do understand by looking?

## Cumulative Frequency

|   Marks   | Frequency | Cumulative Frequency |
|:---------:|:---------:|:--------------------:|
|   0 - 10  |     5     |          5           |
|  11 - 20  |     8     |          13          |
|  21 - 30  |    12     |          25          |
|  31 - 40  |     7     |          32          |
|  41 - 50  |     3     |          35          |


## Frequency Distribution

Three things required

> - $Range, R = X_H - X_L$
> - No. of classes (k) &
> - Class Interval (CI)
> - Let k or CI & find the other
> - $CI  = \frac{Range}{\text{Number of classes (k)}}$
> - $\text{Number of classes, k}= \frac{Range}{\text{CI}}$

## To Make Frequency Distribution

> - Make the intervals
> - Use Tally symbols to get frequencies 

## Variable types

<div class="container">
<div class="col">
Discrete

> - Isolated/specific values
> - Not just Integers!
> - Example: number of goals, grade in a subject
</div>
<div class="col">
Continuous

> - Any value between any two value possible
> - Example: Height, radius
</div>
</div>

## Frequency polygon

```{r frequency_polygon_plot, echo=FALSE, warning=FALSE, message=FALSE, fig.width=7, fig.height=5}
library(ggplot2)
library(dplyr)

# 1. Define the data (using the "Marks" data from earlier)
# We need to create a dataset of individual observations to correctly build the histogram.
# Let's assume the midpoints of the intervals for generating the data.
# Alternatively, we can manually create data points that fall into these bins.

# Option 1: Manually create data points based on frequencies
# This is a bit more robust for exact reproduction of the frequency table
marks_data_raw <- c(
  rep(5, 5),    # 5 observations in 0-10 range (using midpoint 5)
  rep(15, 8),   # 8 observations in 11-20 range (using midpoint 15)
  rep(25, 12),  # 12 observations in 21-30 range (using midpoint 25)
  rep(35, 7),   # 7 observations in 31-40 range (using midpoint 35)
  rep(45, 3)    # 3 observations in 41-50 range (using midpoint 45)
)

# Create a data frame
df_marks <- data.frame(Marks = marks_data_raw)

# Define the breaks for the histogram and frequency polygon
# These should align with your intervals' boundaries.
# For intervals like 0-10, 11-20, etc., the actual bins would be 0-10.5, 10.5-20.5 etc.
# Let's use clean breaks for the plot for simplicity and visual clarity.
# Assuming intervals are inclusive lower, exclusive upper for binning.
# Or, if they are like 0-10, 11-20, then 10.5, 20.5 are the boundaries.
# For simplicity, let's assume the bins are 0-10, 10-20, 20-30, etc. for plotting.
# We'll set breaks at 0, 10, 20, 30, 40, 50.
bin_breaks <- seq(0, 50, by = 10)

# Calculate midpoints for the frequency polygon (for the line plot)
# The midpoints should correspond to the center of each bin
midpoints <- (bin_breaks[-length(bin_breaks)] + bin_breaks[-1]) / 2

# Calculate frequencies for the frequency polygon (for the line plot)
# This part is a bit tricky with ggplot2's `geom_freqpoly` as it calculates frequencies itself.
# To ensure the frequency polygon aligns with the histogram, we let ggplot do the binning.

# Create the histogram with frequency polygon overlay
ggplot(df_marks, aes(x = Marks)) +
  # Histogram layer
  geom_histogram(binwidth = 10, # Match the interval width
                 breaks = bin_breaks, # Ensure bins align with intervals
                 fill = "skyblue",
                 color = "black",
                 alpha = 0.7) +
  # Frequency polygon layer
  geom_freqpoly(binwidth = 10, # Must match histogram's binwidth
                breaks = bin_breaks, # Must match histogram's breaks
                color = "red",
                size = 1.5) + # Thicker line for visibility
  # Add points at the top of each frequency polygon segment
  stat_bin(binwidth = 10, breaks = bin_breaks, geom = "point", color = "red", size = 3) +
  
  # Labels and Title
  labs(title = "Frequency Polygon of Marks",
       x = "Marks",
       y = "Frequency") +
  
  # Customize theme for better aesthetics
  theme(plot.title = element_text(hjust = 0.5, face = "bold", size = 16),
        axis.title = element_text(size = 12),
        axis.text = element_text(size = 10)) +
  
  # Set x-axis breaks to match interval boundaries
  scale_x_continuous(breaks = bin_breaks,
                     labels = c("0", "10", "20", "30", "40", "50")) +
  
  # Ensure y-axis starts at 0
  expand_limits(y = 0)
``` 

## Clean Polygon 

```{r frequency_polygon_only_plot, echo=FALSE, warning=FALSE, message=FALSE, fig.width=7, fig.height=5}
library(ggplot2)
library(dplyr)

# Recreate the data from the frequency table
marks_data_raw <- c(
  rep(5, 5),    # 5 observations in 0-10 range (using midpoint 5)
  rep(15, 8),   # 8 observations in 11-20 range (using midpoint 15)
  rep(25, 12),  # 12 observations in 21-30 range (using midpoint 25)
  rep(35, 7),   # 7 observations in 31-40 range (using midpoint 35)
  rep(45, 3)    # 3 observations in 41-50 range (using midpoint 45)
)

# Create a data frame
df_marks <- data.frame(Marks = marks_data_raw)

# Define the breaks for the frequency polygon (must match the bins)
bin_breaks <- seq(0, 50, by = 10)

# Create the frequency polygon plot without the histogram
ggplot(df_marks, aes(x = Marks)) +
  # Frequency polygon layer
  geom_freqpoly(binwidth = 10, # Must match the bin interval width
                breaks = bin_breaks, # Ensure bins align with intervals
                color = "darkblue",
                size = 1.2) + # Thicker line for visibility
  # Add points at the top of each frequency polygon segment
  stat_bin(binwidth = 10, breaks = bin_breaks, geom = "point", color = "darkblue", size = 3) +
  
  # Labels and Title
  labs(title = "Frequency Polygon of Marks",
       x = "Marks",
       y = "Frequency") +
  
  # Customize theme for better aesthetics
  theme(plot.title = element_text(hjust = 0.5, face = "bold", size = 16),
        axis.title = element_text(size = 12),
        axis.text = element_text(size = 10)) +
  
  # Set x-axis breaks to match interval boundaries
  scale_x_continuous(breaks = bin_breaks,
                     labels = c("0", "10", "20", "30", "40", "50")) +
  
  # Ensure y-axis starts at 0 for proper representation of frequencies
  expand_limits(y = 0)
``` 

## Ogive

```{r ogive_plot_black_grid, echo=FALSE, warning=FALSE, message=FALSE, fig.width=8, fig.height=6}
library(ggplot2)
library(dplyr)

# 1. Define the data for intervals, frequencies, and calculate cumulative frequencies
# Using the upper class boundaries for the x-axis of the ogive.
# Assuming intervals 0-10, 11-20, etc., the upper true limits are 10.5, 20.5 etc.
# The initial point for the ogive is (lower boundary of first class, 0 cumulative frequency).
# Assuming the lowest possible mark is 0, so the first boundary starts effectively at 0.

marks_upper_boundaries <- c(0, 10.5, 20.5, 30.5, 40.5, 50.5)
frequencies <- c(0, 5, 8, 12, 7, 3) # Add 0 for the starting point

# Calculate cumulative frequencies
cumulative_frequencies <- cumsum(frequencies)

# Create a data frame for plotting the Ogive
ogive_data <- data.frame(
  Marks = marks_upper_boundaries,
  CumulativeFrequency = cumulative_frequencies
)

# Create the Ogive plot
ggplot(ogive_data, aes(x = Marks, y = CumulativeFrequency)) +
  geom_line(color = "darkgreen", size = 1.2) + # Line for the ogive
  geom_point(color = "darkgreen", size = 3) +  # Points at each data point
  
  # Removed geom_text() to remove value labels from points
  
  # Labels and Title
  labs(title = "Ogive (Cumulative Frequency Polygon) of Marks",
       x = "Marks", # X-axis label as 'Marks'
       y = "Cumulative Frequency") +
  
  # Set specific x-axis breaks for clarity
  scale_x_continuous(breaks = marks_upper_boundaries,
                     labels = c("0", "10.5", "20.5", "30.5", "40.5", "50.5")) +
  
  # Set specific y-axis breaks for cumulative frequency
  scale_y_continuous(breaks = seq(0, max(cumulative_frequencies), by = 5),
                     limits = c(0, max(cumulative_frequencies) * 1.05)) + # Adjust limits back as no text labels
  
  # Ensure y-axis starts at 0
  expand_limits(y = 0) +
  
  # Apply a base theme and then explicitly add clear black grid lines
  theme_classic() + # Keeping classic for clean axes, but customizing grids
  theme(
    plot.title = element_text(hjust = 0.5, face = "bold", size = 16),
    axis.title = element_text(size = 12),
    axis.text = element_text(size = 10),
    
    # Explicitly show major grid lines as black and solid
    panel.grid.major = element_line(color = "black", size = 0.5, linetype = "solid"),
    # Explicitly show minor grid lines as black and solid (thinner)
    panel.grid.minor = element_line(color = "black", size = 0.25, linetype = "solid"),
    
    # Ensure background is white and add a black border to the panel to create "square boxes"
    panel.background = element_rect(fill = "white", colour = "black", linewidth = 1), # 'size' changed to 'linewidth' in newer ggplot2
    plot.background = element_rect(fill = "white", colour = NA) # No border for plot background
  )
```

## Arithmetic Mean


> - $\bar{X} = \displaystyle \frac{\sum_{i=1}^{n} X_i}{n}$ 
> - Grouped/Classified data: $\displaystyle \bar{X} = \frac{\sum_{i=1}^{k} f_i x_i}{\sum_{i=1}^{k} f_i} = \frac{\sum_{i=1}^{k} f_i x_i}{N}$

## Grouped Data

$\displaystyle \bar{X} = \frac{\sum_{i=1}^{k} f_i x_i}{\sum_{i=1}^{k} f_i} = \frac{\sum_{i=1}^{k} f_i x_i}{N}$

Find AM

> - 2, 2, 3, 4, 5, 6, 6
> - Make a table

## Weighted Mean

Weighetd mean: $\displaystyle \bar{X}_w =  \frac{\sum_{i=1}^{n} w_i X_i}{\sum_{i=1}^{n} w_i}$

> - Weight: Importance of marks by judge
> - Credit of subject/course

| Course       | Marks | Credit |
|--------------|-------|--------|
| Simulation   | 83    | 2      |
| Probability  | 75    | 4      |
| Econometrics | 92    | 3      |

*Credit is weight

## Find $\bar X$

|  Interval  | Frequency |
|:----------:|:---------:|
|   1 - 10   |     7     |
|  11 - 20   |    14     |
|  21 - 30   |    21     |
|  31 - 40   |    17     |
|  41 - 50   |     9     |
|  51 - 60   |     4     |

> -  USe mid-values as $x_i$

# AM Short-cut Method

## Concept

Find $\bar x$

1000, 1010, 1020, 1030, 1040

Be Smart!

> - Subtract 1000 $\rightarrow$
> - $\bar X = a + \frac{\sum f_i u_i}{n} \times h$
> - Find it from previous table
> - Does the value of a matter?

## Shor-cut AM Example

|  Interval  | mid-value ($x_i$) | frequency ($f_i$) | $u_i = \frac{x_i-a}{h}$ | $f_iu_i$ |
|:----------:|:-------------------:|:-------------------:|:------------------------:|:---------:|
|   1 - 10   |        5.5        |         7          |                          |           |
|  11 - 20   |        15.5       |         14         |                          |           |
|  21 - 30   |        25.5       |         21         |                          |           |
|  31 - 40   |        35.5       |         17         |                          |           |
|  41 - 50   |        45.5       |         9          |                          |           |
|  51 - 60   |        55.5       |         4          |                          |           |

## Median

What is the median?

2, 3, 5, 8, 10

> - Explain median
> - What now: 5, 4, 3, 9
> - $\frac{n+1}{2}$ for odd n
> - $\frac{nth + (n+1)th}{2}$ for even n

# IX-X Probability


